package fr.aerwyn81.headblocks.commands.list;

import fr.aerwyn81.headblocks.HeadBlocks;
import fr.aerwyn81.headblocks.commands.Cmd;
import fr.aerwyn81.headblocks.commands.HBAnnotations;
import fr.aerwyn81.headblocks.databases.EnumTypeDatabase;
import fr.aerwyn81.headblocks.handlers.LanguageService;
import fr.aerwyn81.headblocks.utils.MessageUtils;
import org.bukkit.command.CommandSender;

import java.io.File;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@HBAnnotations(command = "export", permission = "headblocks.admin", args = { "database" })
public class Export implements Cmd {
    private final HeadBlocks main;

    public Export(HeadBlocks main) {
        this.main = main;
    }

    @Override
    public boolean perform(CommandSender sender, String[] args) {
        String fileName = "export-" + new SimpleDateFormat("yyyyMMdd").format(new Date()) + ".sql";
        File sqlFile = new File(HeadBlocks.getInstance().getDataFolder(), fileName);

        if (sqlFile.exists()) {
            sqlFile.delete();
        }

        if (args.length != 3) {
            sender.sendMessage(LanguageService.getMessage("Messages.ErrorCommand"));
            return true;
        }

        EnumTypeDatabase typeDatabase = EnumTypeDatabase.Of(args[2]);

        if (typeDatabase == null) {
            sender.sendMessage(MessageUtils.colorize(LanguageService.getPrefix() + " &cThe SQL type &e" + args[2] + " &cis not supported!"));
            return true;
        }

        try {
            Charset charset = StandardCharsets.UTF_8;

            PrintStream ps = new PrintStream(sqlFile, charset);

            ps.println("-- ");
            ps.println("-- File generated by HeadBlocks " + main.getDescription().getVersion() + " (" + LocalDateTime.now()
                    .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + ")");
            ps.println("-- Supported: MySQL, SQLite");
            ps.println("-- Encoding: " + charset.name());
            ps.println("-- For more SQL integration, please ask on the discord https://discord.gg/f3d848XsQt");
            ps.println("-- ");
            ps.println();

            ArrayList<String> instructions = main.getStorageHandler().getInstructionsExport(typeDatabase);

            for (String ins : instructions) {
                ps.println(ins);
            }

            ps.close();
        } catch (Exception ex) {
            sender.sendMessage(MessageUtils.colorize(LanguageService.getMessage("Messages.ExportError") + ex.getMessage()));
            return true;
        }

        sender.sendMessage(MessageUtils.colorize(LanguageService.getMessage("Messages.ExportSuccess")).replaceAll("%fileName%", fileName));
        return true;
    }

    @Override
    public ArrayList<String> tabComplete(CommandSender sender, String[] args) {
        if (args.length == 2) {
            return new ArrayList<>(Collections.singleton("database"));
        }

        if (args.length == 3) {
            return Stream.of(EnumTypeDatabase.values())
                    .map(Enum::name)
                    .collect(Collectors.toCollection(ArrayList::new));
        }

        return new ArrayList<>();
    }
}
